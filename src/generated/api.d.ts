/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/marshals': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get a list of marshals
     * @description Returns a a list of marshals
     */
    get: operations['getMarshals'];
    put?: never;
    /**
     * Add a new marshal
     * @description add a new marshal and stor it in the database.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /** @description marshal name */
            name: string;
            /** @description The phone number  */
            phone: string;
            /** @description The marshals email */
            email: string;
            /** @description marshals location */
            location: string;
          };
        };
      };
      responses: {
        /** @description Marshal created successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Quote'];
          };
        };
        /** @description Internal Server Error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/leaderboard': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve leaderboard
     * @description Returns all users and their scores.
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Array of leaderboard entries */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['LeaderboardEntry'][];
          };
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
        /** @description error */
        default: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    /**
     * Update personal score
     * @description Allows a user to update their personal score on the leaderboard.
     */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json': {
            /** @example 1a1abcd1-a1a1-12a1-12a1-12a12ab1a123 */
            id?: string;
            /** @example 8 */
            sewn_patches?: number;
            /** @example 2 */
            not_sewn_patches?: number;
            /** @example 3 */
            medals?: number;
            /** @example 6 */
            pins?: number;
          };
        };
      };
      responses: {
        /** @description Personal score updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Score updated successfully */
              message?: string;
            };
          };
        };
        /** @description Invalid request data */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Internal server error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/news': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve news
     * @description Retrieves a list of all news.
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['News'][];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example An unexpected error occurred. */
              error?: string;
            };
          };
        };
      };
    };
    put?: never;
    /**
     * Add a new news
     * @description Make a new news and stor it in the database.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /** @description the title of the news */
            title: string;
            /** @description The author of the news. */
            author: string;
            /** @description The text of the news. */
            text: string;
            /**
             * Format: date
             * @description The author of the news.
             */
            date: string;
          };
        };
      };
      responses: {
        /** @description Quote created successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Quote'];
          };
        };
        /** @description Internal Server Error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/quotes': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Retrieve quotes
     * @description Retrieves a list of all quotes.
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Quote'][];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example An unexpected error occurred. */
              error?: string;
            };
          };
        };
      };
    };
    put?: never;
    /**
     * Add a new quote to the quotes
     * @description Make a new quote.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /** @description the quote itself. */
            quotetext: string;
            /** @description The author of the quote. */
            author: string;
          };
        };
      };
      responses: {
        /** @description Quote created successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Quote'];
          };
        };
        /** @description Internal Server Error. */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Internal server error */
              error?: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * User Login
     * @description Authenticate a user by their email and password.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /**
             * Format: email
             * @description The user's email address.
             */
            email: string;
            /** @description The user's password. */
            password: string;
          };
        };
      };
      responses: {
        /** @description Login successful */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Login successful */
              message?: string;
            };
          };
        };
        /** @description Invalid request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Invalid request data */
              message?: string;
            };
          };
        };
        /** @description Authentication failed */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Authentication failed */
              message?: string;
            };
          };
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example An unexpected error occurred */
              message?: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/signout': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * User Signout
     * @description Sign out the currently authenticated user.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No content, user signed out. */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Internal server error */
              message?: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/signup': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * User Signup
     * @description Create a new user account by providing email and password.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json': {
            /**
             * Format: email
             * @description The user's email address.
             */
            email: string;
            /** @description The user's password. */
            password: string;
          };
        };
      };
      responses: {
        /** @description Signup successful */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Sign up successful */
              message?: string;
            };
          };
        };
        /** @description Sign up failed */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Sign up failed */
              message?: string;
            };
          };
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Internal server error */
              message?: string;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/user': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get the authenticated user
     * @description Retrieves the authenticated user's information using Supabase.
     */
    get: operations['getUser'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /**
     * Marshal model
     * @description Marshal
     */
    Marshal: {
      /**
       * Name
       * Format: string
       * @description Name of the marshal
       */
      name?: string;
      /**
       * Location
       * Format: string
       * @description Location of the marshal
       */
      location?: string;
      /**
       * Phone
       * Format: string
       * @description Phone number of the marshal
       */
      phone?: string;
      /**
       * Email
       * Format: string
       * @description Email of the marshal
       */
      email?: string;
      /** @description UID of the person */
      id?: string;
    };
    /**
     * Quote model
     * @description Quote object representing an Quote with details
     */
    Quote: {
      /** @description Description of the quote */
      quotetext: string;
      /** @description Unique identifier for the Quote */
      id: number;
      /** @description Author of of the quote */
      author: string;
    };
    /**
     * news model
     * @description news object representing an news  with details
     */
    News: {
      /** @description Description of the news */
      text: string;
      /** @description Unique identifier for the news */
      id: number;
      /** @description Author of of the news, admin */
      author: string;
      /** @description Title of of the news */
      title: string;
      /** @description date of of the news */
      date: string;
    };
    /**
     * Leaderboard entry
     * @description Data for a row in the leaderboard
     */
    LeaderboardEntry: {
      /** @description Details about the person */
      person: {
        /**
         * @description UID of the person
         * @example 1a1abcd1-a1a1-12a1-12a1-12a12ab1a123
         */
        id: string;
        /**
         * @description URL of the person's avatar
         * @example https://example.com/avatar.jpg
         */
        avatar: string;
        /**
         * @description Full name of the person
         * @example John Doe
         */
        name: string;
        /**
         * @description Nickname of the person (can be null)
         * @example Johnny
         */
        nickname: string | null;
      };
      /**
       * @description Number of total patches
       * @example 10
       */
      total_patches: number;
      /**
       * @description Number of patches that have been sewn
       * @example 7
       */
      sewn_patches: number;
      /**
       * @description Number of patches that have not been sewn
       * @example 3
       */
      not_sewn_patches: number;
      /**
       * @description Number of medals earned by the person
       * @example 2
       */
      medals: number;
      /**
       * @description Number of pins earned by the person
       * @example 5
       */
      pins: number;
    };
    /**
     * UserProfile model
     * @description Combined user and profile data
     */
    UserProfile: {
      /**
       * @description Unique identifier for the user
       * @example 12345-abcde
       */
      id?: string;
      app_metadata?: {
        /** @example email */
        provider?: string;
        /** @example [
         *       "email"
         *     ] */
        providers?: string[];
      };
      user_metadata?: {
        /** @example John Doe */
        name?: string;
        /** @example user */
        role?: string;
      };
      /** @example authenticated */
      aud?: string;
      /**
       * Format: date-time
       * @example 2023-09-01T12:34:56.789Z
       */
      confirmation_sent_at?: string | null;
      /**
       * Format: date-time
       * @example 2023-09-01T12:34:56.789Z
       */
      recovery_sent_at?: string | null;
      /**
       * Format: date-time
       * @example 2023-09-01T12:34:56.789Z
       */
      email_change_sent_at?: string | null;
      /** @example new_user@example.com */
      new_email?: string | null;
      /** @example +1234567890 */
      new_phone?: string | null;
      /**
       * Format: date-time
       * @example 2023-09-01T12:34:56.789Z
       */
      invited_at?: string | null;
      /** @example https://supabase.io/verify_email */
      action_link?: string | null;
      /** @example user@example.com */
      email?: string | null;
      /** @example +1234567890 */
      phone?: string | null;
      /**
       * Format: date-time
       * @example 2023-09-01T12:34:56.789Z
       */
      created_at?: string;
      /**
       * Format: date-time
       * @example 2023-09-01T12:34:56.789Z
       */
      confirmed_at?: string | null;
      /**
       * Format: date-time
       * @example 2023-09-01T12:34:56.789Z
       */
      email_confirmed_at?: string | null;
      /**
       * Format: date-time
       * @example 2023-09-01T12:34:56.789Z
       */
      phone_confirmed_at?: string | null;
      /**
       * Format: date-time
       * @example 2023-09-01T12:34:56.789Z
       */
      last_sign_in_at?: string | null;
      /** @example user */
      role?: string | null;
      /**
       * Format: date-time
       * @example 2023-09-01T12:34:56.789Z
       */
      updated_at?: string | null;
      identities?: {
        /** @example identity-12345 */
        id?: string;
        /** @example email */
        provider?: string;
        /**
         * Format: date-time
         * @example 2023-09-01T12:34:56.789Z
         */
        created_at?: string;
      }[];
      /** @example false */
      is_anonymous?: boolean | null;
      factors?: {
        /** @example factor-12345 */
        id?: string;
        /** @example verified */
        status?: string;
      }[];
      profile?: components['schemas']['Profile'];
    };
    /**
     * Profile model
     * @description Profile object representing additional information about the user
     */
    Profile: {
      /** @example profile-12345 */
      id: string;
      /** @example Peanuts */
      allergies?: string | null;
      /** @example https://example.com/avatar.png */
      avatar_url?: string | null;
      /** @example 1990-01-01 */
      birthday?: string | null;
      /** @example profile@example.com */
      email?: string | null;
      /** @example John */
      first_name?: string | null;
      /** @example Doe */
      last_name?: string | null;
      /** @example Johnny */
      nickname?: string | null;
      /** @example Live and let live */
      motto?: string | null;
      /** @example +1234567890 */
      phone_number?: string | null;
      /** @example 3 */
      role?: number | null;
      /** @example 1 */
      title?: number | null;
      /**
       * Format: date-time
       * @example 2023-09-01T12:34:56.789Z
       */
      updated_at?: string | null;
    };
    Error: {
      code: number;
      message: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  getMarshals: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description successful operation */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Marshal'][];
        };
      };
      /** @description error */
      default: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getUser: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully retrieved the user. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserProfile'];
        };
      };
      /** @description User not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            /** @example User not found */
            message?: string;
          };
        };
      };
      /** @description Internal server error. */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            /** @example Internal server error */
            message?: string;
          };
        };
      };
    };
  };
}
